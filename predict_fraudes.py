# -*- coding: utf-8 -*-
"""predict_fraudes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JeoZLTwkc0-kVnw77RF9L3Q95qY-kCFP
"""

### script adaptado para produÃ§Ã£o
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from geopy.distance import geodesic
from sklearn.preprocessing import LabelEncoder, StandardScaler

# === Caminhos ===
MODEL_PATH = "modelo_rf_final.pkl"
INPUT_PATH = "dados/novos_dados.csv"
OUTPUT_PATH = "resultado_fraudes.csv"

print("Carregando modelo...")
modelo = joblib.load(MODEL_PATH)

print("Lendo dados...")
df = pd.read_csv(INPUT_PATH)

print("PrÃ©-processando...")

# ConversÃµes de data
df['data_hora_transacao'] = pd.to_datetime(df['data_hora_transacao'])
df['data_transacao'] = df['data_hora_transacao'].dt.date
df['hora_transacao'] = df['data_hora_transacao'].dt.hour
df['dia_da_semana'] = df['data_hora_transacao'].dt.day_name()
df['data_nascimento'] = pd.to_datetime(df['data_nascimento'])
df['idade_dono_cartao'] = (pd.to_datetime('today') - df['data_nascimento']).dt.days // 365

# DistÃ¢ncia geogrÃ¡fica
def calcular_distancia(row):
    return geodesic((row['latitude'], row['longitude']),
                    (row['latitude_loja'], row['longitude_loja'])).km
df['distancia_transacao'] = df.apply(calcular_distancia, axis=1)

# TransaÃ§Ãµes por cartÃ£o por dia
df['transacoes_por_cartao_dia'] = df.groupby(['cartao_credito', 'data_transacao'])['id_transacao'].transform('count')

# Encoding
col_categoricas = ['loja', 'categoria', 'genero', 'cidade', 'estado', 'profissao', 'dia_da_semana']
for col in col_categoricas:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# NormalizaÃ§Ã£o
col_numericas = ['valor_transacao', 'idade_dono_cartao', 'distancia_transacao', 'transacoes_por_cartao_dia']
scaler = StandardScaler()
df[col_numericas] = scaler.fit_transform(df[col_numericas])

# Selecionar colunas para prediÃ§Ã£o (igual ao treino)
X = df.drop(columns=[
    'fraude', 'data_hora_transacao', 'id_transacao', 'data_transacao',
    'primeiro_nome', 'sobrenome', 'rua', 'data_nascimento'
], errors='ignore')

print("ðŸ¤– Gerando previsÃµes...")
df['proba_fraude'] = modelo.predict_proba(X)[:, 1]
df['fraude_prevista'] = np.where(df['proba_fraude'] >= 0.6, 1, 0)

print(f"ðŸ’¾ Salvando saÃ­da em: {OUTPUT_PATH}")
df.to_csv(OUTPUT_PATH, index=False)

print("Processo finalizado com sucesso.")